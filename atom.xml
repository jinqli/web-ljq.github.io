<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://web-ljq.github.io</id>
    <title>木子李</title>
    <updated>2021-04-25T02:32:58.019Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://web-ljq.github.io"/>
    <link rel="self" href="https://web-ljq.github.io/atom.xml"/>
    <subtitle>剑，最要远离的就是感情</subtitle>
    <logo>https://web-ljq.github.io/images/avatar.png</logo>
    <icon>https://web-ljq.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 木子李</rights>
    <entry>
        <title type="html"><![CDATA[业务运维面试题]]></title>
        <id>https://web-ljq.github.io/post/ye-wu-yun-wei-mian-shi-ti/</id>
        <link href="https://web-ljq.github.io/post/ye-wu-yun-wei-mian-shi-ti/">
        </link>
        <updated>2021-04-25T02:12:27.000Z</updated>
        <content type="html"><![CDATA[<hr>
<h3 id="qusetion">Qusetion</h3>
<ol>
<li>
<p>怎么运行一个shell脚本 ？</p>
<pre><code class="language-sh">[root@localhost ~]#./test.sh

[root@localhost ~]#. ./test.sh

[root@localhost ~]#/bin/bash ./test.sh
</code></pre>
</li>
<li>
<p>在linux系统中脚本文件一般以什么开头 ？</p>
<blockquote>
<p>#!/bin/bash</p>
</blockquote>
</li>
<li>
<p>磁盘，cpu，内存，服务端口，服务进程的检查命令是什么 ？</p>
</li>
</ol>
<h6 id="磁盘">磁盘</h6>
<ul>
<li>df（disk free）</li>
</ul>
<h6 id="cpu">cpu</h6>
<ul>
<li>cat /proc/cpuinfo</li>
</ul>
<h6 id="内存">内存</h6>
<ul>
<li>top</li>
</ul>
<h6 id="服务端口">服务端口</h6>
<ul>
<li>lsof -i:80</li>
</ul>
<h6 id="服务进程">服务进程</h6>
<ul>
<li></li>
</ul>
<ol start="4">
<li>
<p>如何创建一个空目录 ？</p>
<blockquote>
<p>mkdir 目录名</p>
<p>mkdir -p 目录名1/目录名2  # 递归创建</p>
</blockquote>
</li>
<li>
<p>如何创建一个test.txt ？</p>
<blockquote>
<p>touch test.txt</p>
<p>vi test.txt</p>
<p>vim test.txt</p>
</blockquote>
</li>
<li>
<p>如何把test.txt文件压缩（打包）为tar格式 ？</p>
<blockquote>
<p>tar -cvf test.txt</p>
</blockquote>
</li>
<li>
<p>如何复制，移动一个文件 ？</p>
<blockquote>
<p>复制：cp -r test.txt /home/user/ (-r, 拷贝非空目录要加的选项)</p>
<p>移动：mv test.txt /home/user/</p>
<p>重命名：mv test.txt test.sh</p>
<p>删除：rm -rf test.sh</p>
</blockquote>
</li>
<li>
<p>请表述如果cmd1成功执行，则执行cmd2命令</p>
<blockquote>
<p>cmd1 &amp;&amp; cmd2</p>
<p>ls &amp;&amp; cd / &amp;&amp; ls -l</p>
</blockquote>
</li>
<li>
<p>假如需要找出/etc/rsyncd.conf文件属于哪个包，可以执行 ？</p>
<blockquote>
<p>rpm -qf /etc/rsyncd.conf (针对centOS的)</p>
</blockquote>
</li>
<li>
<p>如何查找/tmp 目录下7天前的文件</p>
<blockquote>
<p>find /tmp -ctime +7</p>
</blockquote>
</li>
</ol>
<h4 id="权限问题">权限问题</h4>
<ol>
<li>
<p>如何调整文件权限 ？</p>
<blockquote>
<p>chmod xxx 目标文件或目录</p>
</blockquote>
</li>
<li>
<p>文件权限750表示什么含义 ？</p>
<blockquote>
<p>文件拥有者有最高权限（rwx），群组成员只有可读可执行的权限（rx），其他组成员没有任何权限</p>
</blockquote>
<p>文件权限分成员为</p>
<ul>
<li>文件拥有者</li>
<li>群组</li>
<li>其他组</li>
</ul>
<p>文件权限分为</p>
<ul>
<li>r：read（读）= 4</li>
<li>w：write（写） = 2</li>
<li>x： execute（执行） = 1</li>
</ul>
</li>
<li>
<p>如何调整文件的所有组 ？</p>
<blockquote>
<p>chgrp：（change group），主要用于修改文件或目录的所有组</p>
<pre><code class="language-shell">[root@localhost ~]# chgrp [-R] 所有组 文件或目录
</code></pre>
<p>[-R]（递归）选项表示连同子目录中的所有文件都更改，前提是群组名必须真实存在，否则会报错&quot;invaild group name&quot;</p>
<p>chown：（change owner），主要用于修改文件或目录的所有者，也可以修改文件或目录的所有组，一般用于修改所有者</p>
<pre><code class="language-shell"># 修改所有者
[root@localhost ~]# chown [-R] 所有者 文件或目录
# 同时修改所有者和所有组
[root@localhost ~]# chown [-R] 所有者:所有组 文件或目录
# 修改所有组
[root@localhost ~]# chown :所有组 文件或目录 # 前提是组必须存在
</code></pre>
<p>[-R]（递归）选项表示连同子目录中的所有文件都更改</p>
</blockquote>
</li>
</ol>
<hr>
<h4 id="其他问题">其他问题</h4>
<ol>
<li>描述一下TCP三次握手的过程</li>
<li>职业规划</li>
<li>对运维的理解（优缺点）</li>
<li>一些基本的运维面试题</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[web安全学习路线总结-自学篇]]></title>
        <id>https://web-ljq.github.io/post/web-an-quan-xue-xi-lu-xian-zong-jie-zi-xue-pian/</id>
        <link href="https://web-ljq.github.io/post/web-an-quan-xue-xi-lu-xian-zong-jie-zi-xue-pian/">
        </link>
        <updated>2021-04-11T03:26:44.000Z</updated>
        <content type="html"><![CDATA[<h2 id="学习web安全web渗透测试之前应该了解什么是web">学习web安全（web渗透测试）之前，应该了解什么是web。</h2>
<h2 id="细分">细分</h2>
<ol>
<li>web前端安全</li>
<li>web后端安全</li>
<li>web数据安全</li>
<li>web通信安全</li>
<li>web容器安全</li>
</ol>
<hr>
<ul>
<li>web前端，常指客户端浏览器，<br>
技术架构：HTML，CSS，JavaScript<br>
攻击方式：xss，csrf</li>
</ul>
<hr>
<ul>
<li>web后端，指的是放在服务端用来处理数据逻辑的代码<br>
可以是不同的编程语言实现：PHP，Python，Java，Go等语言</li>
</ul>
<hr>
<ul>
<li>web数据：指的是数据库的安全问题<br>
最常见的是Mysql，Oracle，Redis等数据库（昨晚拿学校官网测试了一下，发现学校官网用的是SQL Server，裂开。。。）</li>
</ul>
<hr>
<ul>
<li>web通信：有url劫持，和dns劫持等<br>
这一块需要掌握的是通信协议这些技术，比如http和https，tcp/ip那一家子</li>
</ul>
<hr>
<ul>
<li>web容器安全：针对一些存放web源代码的一个容器<br>
比如我自己用的Nginx，还有apache，Tomcat，以及没接触过的IIS（Internet Information Services）</li>
</ul>
<hr>
<h2 id="总结">总结</h2>
<p>所以说，学习web安全并不是一件轻松的事情，需要涉及到的知识确实比较多，但这些都阻挡不了我进去的决心😂</p>
<blockquote>
<p>第一次写，其中肯定会有所不足，待我技术提高之时再来更新此文。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS数组打平]]></title>
        <id>https://web-ljq.github.io/post/js-da-ping-shu-zu/</id>
        <link href="https://web-ljq.github.io/post/js-da-ping-shu-zu/">
        </link>
        <updated>2021-04-10T10:25:10.000Z</updated>
        <summary type="html"><![CDATA[<p>一次面试碰到的题，还记得当时一脸懵逼，果然还是代码敲少了。</p>
]]></summary>
        <content type="html"><![CDATA[<p>一次面试碰到的题，还记得当时一脸懵逼，果然还是代码敲少了。</p>
<!-- more -->
<p>如题：</p>
<pre><code class="language-javaScript">let initialArray = [1,2,3,4,[5,6,7],[8,9,[10,11]]];
let outputArray = [1,2,3,4,5,6,7,8,9,10,11];
</code></pre>
<hr>
<ul>
<li>第一种：数组自带的方法 Array.flat()</li>
</ul>
<pre><code class="language-javaScript">initialArray.flat(Infinity); // 展开无限层，也可以是Number，flat(1)
</code></pre>
<hr>
<ul>
<li>第二种：通过递归实现（明人不说暗话，我面试的时候也是用的递归，遍历初始数组里面的元素是不是单个元素，若是直接push，不是的话再来一遍</li>
</ul>
<pre><code class="language-javaScript">function myFlat(arr) {
    // 定义一个空数组用来放结果
    let emptyArray = [];
    arr.map(item =&gt; {
        // 进行条件判断是不是数组
        if(Array.isArray(item)){
            // 是的话就继续调用flat
            // flat返回的是数组形式，所以需要使用 concat
            emptyArray = emptyArray.concat(myFlat(item));
        } else {
            emptyArray.push(item); // 是单个元素，直接push
        };
    });
    return emptyArray; // 返回结果
};
</code></pre>
<hr>
<ul>
<li>第三种：(toString &amp;&amp; split) 或 (join &amp;&amp; split)</li>
</ul>
<pre><code class="language-javaScript">// 调用数组的toString方法和join方法，将数组变为字符串
// 然后再用split分割还原为数组

function myFlatten_3(initialArray) {
   return (
       initialArray
       // .toString()
       .join()
       .split(&quot;,&quot;)
       .map((item) =&gt; {
           // return item;
           // return Number(item);
           return parseInt(item);
       })
   );
}
console.log(myFlatten_3());
</code></pre>
<hr>
<ul>
<li>第四种：扩展运算符</li>
</ul>
<pre><code class="language-javaScript">// 利用es6的扩展运算符，对数组进行遍历，只要里面有数组就扩展直到没有为止
function myFlatten_4(initialArray) {
  while (initialArray.some((item) =&gt; Array.isArray(item))) {
    initialArray = [].concat(...initialArray);
  }
  return initialArray;
}
console.log(myFlatten_4());
</code></pre>
<hr>
<blockquote>
<p>以上几种是我目前能力能理解的方法了，数组打平肯定还有其他方法，继续加油。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker+Kali笔记]]></title>
        <id>https://web-ljq.github.io/post/dockerkali/</id>
        <link href="https://web-ljq.github.io/post/dockerkali/">
        </link>
        <updated>2021-04-09T13:08:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="使用docker学习kali">使用docker学习kali</h2>
<p>在云服务器上安装docker+kali，然后在本地搭建一系列web渗透环境。</p>
<p>环境：<br>
centOS7<br>
docker<br>
kali<br>
...</p>
]]></content>
    </entry>
</feed>